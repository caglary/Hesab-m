<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD09ugA9vfsAubuzQbW5KsE3um8BPT37QPj7MgE1uSrBOLs
        xQbz9eYD5e3HA9vntAXd6boF7vPdBOrv2APb57YF1+WuBOPswwPw9N8D3um7BdPhogXU36QJ8fTgAf//
        /wP///4C///8A////wL///8A////AAAAAAAAAAAAAAAAALXFZwC7yXEblq4hno6oDrCRqxabuspuKZev
        JIaOqA+wkqoXqqe7RTKVrSBlj6gRsZCpE7ChtjlMm7IsS4+pEq+OqBCwl64mZaC2NzGQqROpkaoXrbDC
        V2Grxvohc57vcVKG7J1MguykX5DtiXeh7zro8fsJ////AP///wAAAAAAqrxNAKy+USONpwzjiKMA/4mk
        A+Citzcuj6gOwIijAP+JpAP2lq8gQo2nDZKIowD/iaMC/5OsGmeSqxdriKMB/4ijAf+QqBWSjagPQIij
        AveWrh6wmrfITlOH7cI/eev8Pnvr/0GD7P88duv/Rn7s6XOe73/n7/sQssv0AP///wCqvEwArL5QI42n
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///ADb47gA////ApuxLX+RqhfVt8dmKqS4
        PwD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///wCOpxEAsMJaG6/B
        V0j///8F7/PdAP/9/QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//
        /wD///8A////Av///wD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////////gAAAH4AAAAeAAAADgAAAA4AAAAGAAAABgAAAAYAA
        AAGAAAABgAAAA/gAAAf4AAAP/8AB///AAf//xAH///wB///8Af///wB///8Af///AP///4D///+B////
        wf///8P////j////9/////////////////8=
</value>
  </data>
</root>